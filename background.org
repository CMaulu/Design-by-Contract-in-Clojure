#+TITLE:     Design by Contract in Clojure: background
#+AUTHOR:    Giles Chamberlin
#+OPTIONS:   H:2 num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+LaTeX_CLASS_OPTIONS: [a4paper, 12pt] 
#+LATEX_HEADER: \usepackage{parskip} \usepackage{times} \usepackage{listings} \usepackage{cite}
#+LATEX_HEADER: \usepackage{hyperref} 

\hypersetup{
    colorlinks,%
    citecolor=black,%
    filecolor=black,%
    linkcolor=black,%
    urlcolor=black}



* A background to Design by Contract


There is a long history \cite{historical} behind the use of assertions
to improve program reliability.  Originally introduced to support
formal reasoning about the state of the program, there has been
significant uptake amongst practising software engineers beginning
with Parnas' description of software module specification
\cite{Parnas}.  The current state of the art is such that assertions
are frequently used pragmatically, to verify assumed state, but rarely
to formally prove the program \cite{Hoare}.

In this section we consider the use of run time assertion checking
systems in a number of programming languages.  Our intent is to use this
discussion to ascertain the important features of such a system which
may then be used as the basis for the requirements of a system
implemented in Clojure.


** Eiffel

Meyer's book "Object Oriented Software Construction" \cite{oosc}
introduced the term "Design by Contract" to much of the software
engineering community.  In his book, Meyer lays out his views of how
to develop robust software and in the process introduces a new object
oriented language, Eiffel, which embodies those design principles. One
of the key concepts is the use of pre and post conditions to provide a
contract between the caller and provider of a method.  In the event of
contract violation blame is then assigned depending upon which
condition was violated.

Inheritance and the Liskov Substitution Principle (LSP) \cite{lsp} are
supported through the respective strengthening and weakening of pre
and post conditions in derived classes. A derived method may require
no more, and promise no less, than its parent.

Eiffel contracts are implemented in terms of assertions, similar to
those found in the C family of languages. In practice Eiffel
assertions are generally restricted to simple checks on field and
parameter values.  Function calls are permitted though Meyer argues
\cite[p.\ 402]{oosc} that such functions should be kept simple and
"beyond reproach".  Practically speaking this means that significant
side effects must be avoided.  Significant? The practice of adding
debug print statements is wide spread, particular in the case of a
failed assertion.

With Meyer's strongly object oriented approach, contracts are enforced
when calling the public methods of an object. Calls internal to an
object neither invoke the contracts nor trigger invariant checks.

In line with Parnas' assertion that contracts should be readily
available to the developer, Meyer provides a tool which generates a
short form of his class descriptions; essentially an interface
specification.  This short form includes the pre and post conditions.



** JML

JML \cite{jml} provides a Design by Contract framework for Java.  Much
of the functionality is similar to that introduced in Eiffel: pre and
post conditions are provided for class methods and the LSP is
supported through the respective strengthening and weakening of those
pre and post conditions.

JML is written in terms of annotations embedded in the comments of
the Java program.  These comments are then processed by =jmlc= which
generates a wrapper class to enforce the contract and delegates the
implementation to the native java code.  The use of annotated comments
simplifies the implementation of =jmlc=: it just has to pre-process the
annotations and generate legal java which is then compiled as usual.
Unfortunately it has the disadvantage that the usual productivity
tools associated with a modern development environment: syntax
highlighting, auto-completion etc. are no longer available. 

A distinctive aspect of JML, in contrast to Eiffel, is its support for
model based specification based on the work in Larch
\cite{Guttag:1993:LLT:151155}. An abstract model of the system is
constructed in the JML annotations and its representation checked
against that of the underlying implementation. Data, albeit meta-data,
may be modified in a contract. This is in contrast to the assertion
mechanisms of the C family of languages where assertions should never
have side effects.  The intent is to provide a meta-data model of the
underlying implementation.  Contract conditions may then adjust this
meta-data model to track what should be happening in the
implementation.

\textit{TODO: I would like to spend some more time investigating the
similarities and differences between Design by Contract and Larch's
model based specifications.}



** Contracts in functional languages
The simple parameter and return value checking that follows from
Parnas' work has proved useful in the procedural world.  Its utility
is severely reduced in functional programming paradigms where
functions are passed around as first class objects.  It is no longer
possible to simply examine the arguments to a function at call time to
know if they satisfy the precondition.


Although the absence of high order contracts has been picked up by the
functional community, it is also of significance in the procedural and
object oriented communities.  Even in C, function pointers can be
passed so it could be advantageous to attach a contract to those
functions.  In object oriented paradigms, patterns such as the Command
Object \cite{GoF} allow a closure to be passed to a method for later
processing; again a candidate for high order contract checking.


Racket, previously known as PLT Scheme, has taken on the idea of
contracts. Contracts in Racket are separated from the function 
definition in a module exports section \cite{racket}. This allows
contracts to be enforced only at module boundaries.  Calls to a
function within the module do not undergo contract checking.  This
follows the premise of Eiffel \cite[p.\ 366]{oosc}.


# introduces the concept of =any= and =any/c=.  Can be used to state
# that any integer can be returned etc.

The Racket implementation is based on the work of Findler and
Felleisen \cite{hof} who state that: "Contracts are either simple
predicates or function contracts.  Function contracts, in turn,
consist of a pair of contracts [\ldots] one for the domain of the
function and one for the range of the function."
It is this recursive approach to contracts which allows the use of
high order functions --- high order contracts cannot be enforced until
some function consumes or produces only first order values.

Central to their implementation of contracts for high order functions
is the meta function, =wrap= which wraps the underlying function
implementation.  If the contract is a simple predicate, it is
evaluated and the positive position blamed for any failure.  For
non-flat i.e. function contracts, positive and negative blame
positions are swapped and the wrap called recursively on that function
contract.


# High order contracts described in
# file:./papers/contracts-as-projections.pdf


Hinze et al.\cite{citeulike:661450} extend the work of Findler and
Felleisen, introducing a Domain Specific Language (DSL) to support the
description and composition of contracts.  Again the focus of this work
is on refining the blame assignment in the event of a contact failure.
Whilst is helpful to know of the existence of a bug in your program,
knowledge as to where in the program the bug exists is even more
valuable.  Findler and Felleisen track at most two locations for blame
assignment. When contracts are being applied to high order functions,
this necessitates discarding dependent contract location data and
replacing with the current contract's location data.  Hinze et al.
provide a pair of stacks of locations.  For a first order function
this simplifies to the Findler and Felleisen model, but carries
additional information for higher order functions.


\textit{TODO: Hinze uses manually assigned labels to locate the blame
point in the code and leaves automatic source line identification for
further study.  Using some of the ideas from
clojure-contrib/repl-utils I may be able to provide that information
automatically.}

* A brief introduction to Clojure

Clojure \cite{clojure} is a Lisp dialect running on the Java Virtual Machine (JVM).
Primarily a functional language, Clojure uses Software Transactional
Memory (STM) to provide thread safe state changes. As with
other Lisps, a powerful macro system is present.  This allows Clojure
code to be treated as data.  Whilst the deep internals of Clojure are
written in Java, the majority of the language is written in terms of
itself.  For example =defn=, the symbol usually used to introduce a
function definition, is written in terms of =fn=.

A typical use of =defn= would be:

#+srcname:unchecked-java-sqrt
#+begin_src clojure  
  (defn unchecked-java-sqrt
    "Return the square root of n, calling the underlying 
     Java implementation"
    [n]
    (Math/sqrt n))
#+end_src

Anonymous functions may be introduced with =fn=.  

#+begin_src clojure
(fn [n] (+ 3 n))
#+end_src


=fn= itself, the core of a function definition, provides support for
condition checking through meta data.   Since Clojure 1.1 =fn= is
defined \cite{clojure.fn} as:


#+begin_src clojure
(fn name? [params* ] condition-map? exprs*)
(fn name? ([params* ] condition-map? exprs*)+)
#+end_src


Where the optional condition-map parameter may contain keys for pre
and post conditions associated with a vector of assertion expressions.


#+begin_example
{:pre [pre-expr*]
 :post [post-expr*]}
#+end_example

This provides basic condition checking, allowing us to define a new
version of =java-sqrt=


#+srcname: checked-java-sqrt
#+begin_src clojure
  (defn checked-java-sqrt 
    "Precondition checks prior to calling underlying function"
    [n]
    {:pre [(number? n) (>= n 0)]}
    (Math/sqrt n))
#+end_src


Should the pre-condition be violated, a Java =AssertionError=
exception will be thrown which can be handled in Clojure in the normal
manner:


#+begin_src clojure 
(try (print (checked-java-sqrt -1))
       (catch AssertionError e
         (.getMessage e)))
#+end_src


Will return:

#+results:
: Assert failed: (>= n 0)


#+srcname: contracts
#+begin_src clojure :tangle hello.clj :exports none :noweb yes
  <<unchecked-java-sqrt>>

  <<checked-java-sqrt>>
#+end_src


** Anatomy of a clojure precondition

The usual way of introducing a function into a Clojure environment,
=defn= is a macro which can accept pre and post conditions..
#+begin_src clojure :exports none
 (macroexpand '(defn checked-java-sqrt 
    "Precondition checks prior to calling underlying function"
    [n]
    {:pre [(number? n) (>= n 0)]}
    (Math/sqrt n))) 
#+end_src

Macro expansion, prior to compilation, wraps the body of the =defn= in
assertions validating the pre and post conditions.  It is this
augmented body which is compiled to form the function. 

Omitting meta data, macro expansion of =checked-java-sqrt= yields:
#+begin_src clojure
(fn* checked-java-sqrt 
     ([n]
	(clojure.core/assert (number? n))
	(clojure.core/assert (>= n 0))
	(Math/sqrt n))
#+end_src
The demotion of the conditions to generalised assertions loses the
ability to extract the conditions for use in Eiffel style short form
descriptions. Pre or post condition violation can be inferred from
which assertion fails and blame assigned through inspection of the
call stack obtained via =getStackTrace= in the case of pre condition
failure. Though usually robust, it is possible for the JVM to omit
stack frames in order to optimise execution so a violating caller may
not appear in the list of blame candidates.


** Mutable data

Clojure provides support for mutable data through the use of
transactional references: =ref='s.  Modifications to the data must be
wrapped in a transaction and may be protected by a validator function.
This validator function provides another point at which system
integrity may be verified.  When the validator is called the nature of
the transaction is unknown so method pre and post conditions are
inappropriate but this hood does provide an ideal point for
maintaining data invariants.


** The current state of Design by Contract 

Whilst Clojure has basic support for pre and post condition checking, and
some enthusiastic blogs
\cite{onclojure-blog}, \cite{objectcommando-blog} about the
possibilities, examination of typical libraries reveals little usage:
=clojure-contrib= currently (Version 1.2) has one =:pre= check in
27,000 lines of code. In contrast there are 41 asserts.

A similar picture emerges for the use of validator functions, there
are no calls to =set-validator!= in =clojure-contrib=.  Refs are in
use though: the transactions functions used to alter them are called
several times:

| mutating function | frequency |
| =ref-set=         |        22 |
| =alter=           |        11 |
| =commute=         |         7 |


\textit{TODO: Just looking at clojure/contrib may be a bit of a
narrow.  There's now a list of many clojure libraries at
clojure-libraries.appspot.com so taking a representative sample from
there might be fairer.}


\bibliographystyle{alpha}
\bibliography{dbc}
