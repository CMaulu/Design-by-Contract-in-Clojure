#+TITLE:     Design by Contract in Clojure: implementation
#+AUTHOR:    Giles Chamberlin
#+OPTIONS:   H:2 num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+LaTeX_CLASS_OPTIONS: [a4paper, 12pt] 
#+LATEX_HEADER: \usepackage{parskip} \usepackage{fourier} \usepackage{minted} \usepackage{cite}
#+LATEX_HEADER: \usepackage{hyperref} 


# upquote package is used to get proper back quote behaviour in code
# listings.  Means we can't change from Computer Modern for our tt font

#+LaTeX_HEADER: \usepackage{upquote} \usemintedstyle{bw} 


\hypersetup{
    colorlinks,%
    citecolor=black,%
    filecolor=black,%
    linkcolor=black,%
    urlcolor=black,
    pdfauthor=Giles Chamberlin,
    pdfsubject=Draft chapter for M.Sc. dissertation,
    pdftitle=Design by contract in Clojure
}

\listoflistings

* A Clojure implementation

** Terminology

In the following section we develop a Clojure implementation of a
Design by Contract framework.  A number of functions go through an
evolution as the implementation is refined.  Non-final function
definitions are named with numeric suffices: =myfunc-1=, =myfunc-2=
etc., the final form being =myfunc=.  References in the text to the
entirety of this evolving family of definitions are made as
=myfunc-*=.

** An initial approach

Our initial implementation is based on that described by Findler and
Fellisen. In Listing \ref{lst:wrap} we define a function, =wrap= which
is used to provide validation of a function parameter.  Should the
parameter be first-order, =wrap= will trigger an immediate assertion
check.  High order parameters, i.e.\ a function which will be used
later, are replaced by a new function which wraps the original in a
contract checker.

TODO expand on what happens with multi parameter functions

Should the contract fail, blame will be assigned based on whether the
pre or post-condition was responsible.  An error message can be
emitted with the culprit identified appropriately.

#+srcname: preamble
#+begin_src clojure :tangle yes :exports none 
(ns dbc.core
  (:use clojure.test clojure.walk clojure.contrib.condition))
;; Commentary
;; This file is generated from the literate programming sources in
;;  impl.org, use that as the master.

;;
;; All contracts pertain to the arguments to this function so if the
;; argument is a high order function, then the contract states: "takes
;; a function which returns positive numbers" or some such.

;; So how do we describe that contract?

;; "takes a positive number": (pos ?)
;; "takes a function which returns a positive number": ?



(declare make-contract dom rng flat?)

(defn lenient [_]
  true)

(defn strict [_]
  false)



(deftest contract-construction
  (testing "Flat predicate"
    (is (flat? :foo))
    (is (not (flat? (make-contract :foo :bar)))))
  (testing "Contract construction"
    (is (= 2 (count (make-contract :foo :bar))))
    (is ((dom (make-contract lenient lenient)) 42))))





(defn pred [contract value]
  "CONTRACT must be a function which accepts a single value to check."
  (contract value))

  (declare fo-wrap ho-wrap)

; TODO look at using clojure-contrib.condition/raise here
(defn    contract-error [position]
  (throw (Exception. (str "Contract failed: " position))))


#+end_src

#     Mutual recursion, as in ho-warp and wrap, probably ought to
#     use trampolining:
#     http://groups.google.com/group/clojure/msg/3addf875319c5c10

#+latex: \begin{listing}[H]
#+LATEX: \caption{Clojure implementation of \texttt{wrap}}\label{lst:wrap}
#+srcname: wrap1

#+begin_src clojure :tangle yes :exports code
  (defn wrap [contract value p n]
    (if (flat? contract)
      (fo-wrap contract value p n)
      (ho-wrap contract value p n)))
  
  (defn fo-wrap  [contract value p n]
    (if (pred contract value)
      value
      (contract-error p)))
  
  (defn ho-wrap [ct x p n]
    (let [d (dom ct)
          r (rng ct)]
      (fn [y] (wrap r
                    (x (wrap d y n p))
                    p
                    n))))
#+end_src
#+latex: \end{listing}


** TODO: rephrase
Findler et al. refer to =wrap= as a contract monitor, we prefer
Contract Enforcement Point (CEP) as "monitor" seems a somewhat passive
description of something which has the ability to terminate a
program.  This also allows the use of Contract Definition Point (CDP)
for the location in the program text where the contract is defined.
This emphasises the separation between definition and enforcement and
provides a useful comparison with the terminology used in policy based
management \cite{RFC3198}.


The underlying contract implementation is hidden behind utility
functions.  As is idiomatic in Clojure development, the  first data
structure of choice is =map=.  Here we define two keys, =:dom= and
=:rng= to hold the domain and range (pre and post conditions).

#+begin_src clojure :tangle yes :exports code
  (defn make-contract [pre post]
    {:dom pre :rng post})
  
  (defn dom [contract]
    (:dom contract))
  
  (defn rng [contract]
    (:rng contract))
  
  (defn flat? [x]
    (not (map? x)))
#+end_src

To examine how this works we look first at an Eiffel style first order
contract. We define a faulty single parameter function which requires
its argument to be positive and guarantees its return value is also
positive.


#+latex: \begin{listing}[H]
#+latex: \caption{First order require/ensure implementation} \label{lst:fo}
#+srcname: lst:fo
#+begin_src clojure :tangle yes :exports code
  (defn gt0? [x]
      (and
       (number? x)
       (pos? x)))
  
  (def faulty-sqrt
     (wrap (make-contract gt0? gt0?)
           (fn [not-used] -1)
           "Post condition violated" "Precondition violated"))
#+end_src
#+latex: \end{listing}




In Listing \ref{lst:fo} we introduced the predicate =gt0?= to
verify that the argument is both numeric and greater than zero. A
naive use of the predicate =pos?= will cause a
=java.lang.ClassCastException= to be thrown if something other than a
number is passed in.  As this exception will bypass our blame
assignment we need to protect against it.  This form of category error, failing to predicate all possible argument types that
the function may be called with, is easily made when the programmer is
focusing purely on defining the function and contract at hand.  In
normal Clojure development the error would then be caught either at
the REPL or during more formal testing, but that negates the value of
our Design by Contract harness.  We will therefore wish to provide a
library of basic predicates such as =gt0?= which accept a wider
category of inputs.

Looking=faulty-sqrt= demonstrates blame assignment, allowing the user of a
function to determine whether it is the called or calling function at
fault. Calling =(faulty-sqrt 1)= will throw an exception declaring
that the post condition was violated, a fault in the called function,
whilst =(faulty-sqrt 0)= will declare that the pre-condition has been
violated, with the caller at fault.


To demonstrate the application of =wrap= we use a simple high order
example  based on section 2.2 of \cite{hof}. Consider a function
=save= which saves a function and =use= which later calls the saved
function, activating its contract.  We wish to constrain =save= to
only accept functions which take and return  numbers greater than 0.  


#+latex: \begin{listing}[H]
#+latex: \caption{Application of \texttt{wrap}} \label{lst:ff-use}
#+srcname: ff-use
#+begin_src clojure :tangle yes :exports code
  (def ff-saved (ref (fn [not-used] 50)))
  
 
  
  ;;; (bigger-than-0 -> bigger-than-0) -> any
  (defn ff-save [f] (dosync (ref-set
                          ff-saved
                          (wrap (make-contract gt0? gt0?) f "p" "n")) ))
  
  
  ;;; bigger-than-0 -> bigger-than-0
  (defn ff-use [n] (ff-saved (wrap gt0? n "p" "n")))
  
  
  (deftest ff-example ;\ref{line:test}
    (ff-save (fn [not-used] 50))
    (is (= 50 (ff-use 42)))
    (is (thrown? java.lang.Exception (ff-use -1)))
    (ff-save (fn [not-used] -1))
    (is (thrown? java.lang.Exception (ff-use 42))))
#+end_src
#+latex: \end{listing}



Listing \ref{lst:ff-use} also adopts the comment contract
specification notation from \cite{htdp} to specify the expected types
of arguments and return values.  But it is the goal of executable
contracts to replace that information in an enforceable way without
the redundancy of unconnected commentary.  We will visit this problem
in section \ref{selfdocumenting}.

The =deftest= of Listing \ref{lst:ff-use} validates our contract
implementation, demonstrating that exceptions are thrown  should
either the argument or return value of the stored function be less
than zero. Similar unit tests are provided for the rest of our
framework implementation but are omitted from this document.





** Code generation
Although logically correct, manually wrapping each occurrence of a
parameter in calls to =wrap= is tedious and error prone; the sort of
thing computers were intended to relieve us from.  Clojure, like other
lisps, has a sophisticated macro system which can be used to
automatically generate this code.

Lisp's macros should not be considered in the same vein as the C
family =#define=.  Whilst C's macros use a simple pre-processor to
perform textual substitution, Lisp macros have access to the entire
Lisp language to perform manipulations.  Macro are run and generate
code at macro expansion time.  That code and any other regular code is
then executed at run time.  

At its simplest macros make use of the special backquote syntax.  In a
similar manner to the =quote= special form, the of a backquote
expression is emitted verbatim.  Unlike the =quote= syntax, individual
elements of the body can be executed by preceding with a =~=.  The
following macro emits code to sum the macro arguments:

#+begin_src clojure
(defmacro pointless-summation [a b]
 `(+ ~a ~b))

(pointless-summation 3 4)
#+end_src

The generated code can be examined using =macroexpand= which reveals 

#+begin_src clojure
(clojure.core/+ 3 4)
#+end_src

This is the code which will be executed at run time. A full
explanation of macros is beyond the scope of this dissertation,
\cite{Seibel} is recommended as a starting point.

We will initially consider functions taking a single argument.
Extension to multiple argument functions will be achieved through use
of Clojure's somewhat limited support for currying.



#+latex: \begin{listing}[H]
#+latex: \caption{caption} \label{defcontract1}
#+srcname: label
#+begin_src clojure :tangle yes :exports code
(defmacro defcontract-1 [fn-name a c body]
  (let [wrapped-arg {a `(wrap ~c ~a "p" "n")} ] 
    `(defn ~fn-name [~a]
       ~(clojure.walk/postwalk-replace wrapped-arg body))))


  (defcontract-1 ff-save-2 f (make-contract gt0? gt0?)
    (dosync (ref-set ff-saved f)))
  
#+end_src
#+latex: \end{listing}

Examining what's happening in Figure \ref{defcontract1}: the =let=
line creates =wrapped-arg=, a map holding the original function
argument and its intended replacement. This replacement argument calls
=wrap= with both the original argument and its contract. The following
line, starting with =`= forms the new function definition; forms
prefixed with \tilde are replaced with the result of their evaluation,
all other forms are rendered verbatim.  The function
=postwalk-replace= will replace each occurrence of the original
argument with its wrapped equivalent.

The overall result of this macro is to create a function definition
with every use of an argument wrapped in a call to the =wrap= function
of Figure \ref{wrap}. 


As well as checking the argument to the function =fn-name= defined
using =defcontract-1=, we need to verify the return value from the
function.  There are two possible approaches to this: we could use
Clojure's pre-existing post-condition check, =:post= discussed previously, or
we could use the =wrap= function developed above.  The use of =:post=
checks would limit us to simple flat asserts about the return value,
whereas we would like to still have the ability to check high order
function returns.  Accordingly we will use =wrap= to verify return
values from functions defined using =defcontract-*=


Using this macro we can simplify the definitions of =ff-use= and
=ff-save= from Listing \ref{lst:ff-use} to:



** TODO add checking of return value

#+latex: \begin{listing}[H]
#+latex: \caption{=ff-save= implemented with the contract macro.} 
#+latex: \label{lst:ff-use2}
#+srcname: label
#+begin_src clojure :tangle yes :exports code
  (defcontract-1 ff-use-2 n gt0?
    (ff-saved n))
#+end_src
#+latex: \end{listing}





#+begin_src clojure :tangle yes :exports none
 
 (deftest ff-example-2 ;\ref{line:test}
    (ff-save-2 (fn [not-used] 50))
    (is (= 50 (ff-use-2 42)))
    (is (thrown? java.lang.Exception (ff-use-2 -1)))
    (ff-save-2 (fn [not-used] -1))
    (is (thrown? java.lang.Exception (ff-use-2 42))))
#+end_src


** Separation of concerns
The macro defined in Figure \ref{defcontract1} successfully automates
the process of wrapping function parameters in contract checking
code. Unfortunately the resulting code is monolithic; conflating
function implementation and contract.  When used for functions like
the =sqrt= example this is not too disastrous: the contract is a
result of the underlying mathematics of the implementation.  But if we
need similar contracts for other functions reuse will be limited.  In
some cases contracts will be used to impose business rules on a
function, rather than implementation artefacts.  In those cases we may
want to reuse the function implementation with a different contract in
an alternative environment.

Ideally a contract should just be an aspect of the function, along
with its implementation.  Aspect Oriented Programming has been used
\cite{aopdbc} to implement Design by Contract in AspectJ.  We're
seeking to develop a similar approach where the contract and
underlying function implementation can be specified separately and
combined at will.

Following the method used for first order contracts in \cite{joy} we
restate the problem to provide a contract observing function which
calls an implementation function.  


#+latex: \begin{listing}[H]
#+latex: \caption{Separating contract from implementation} \label{aop}
#+srcname: aop
#+begin_src clojure :tangle yes :exports code
; Code for separting contract from impl
#+end_src
#+latex: \end{listing}



The boiler plate code for this recurring pattern can be abstracted in
to another macro:

#+begin_src clojure
;; macro to generate the above
#+end_src







** Blame assignment
In order to assist the debugging process we wish to able locate the
code involved in contract failures.  Our intent is to provide that
information in the same format as produced by tools such as gcc so
that other development tools can easily utilise the data, perhaps
taking the user to the corresponding file. File and line information
is available in Clojure, but accessing it will require a short tour of
some of the language's internals.

A basic building block of Clojure is the =var=.  From
clojure.org/vars: "Vars provide a mechanism to refer to a mutable
storage location that can be dynamically rebound (to a new storage
location) on a per-thread basis. Every Var can (but needn't) have a
root binding, which is a binding that is shared by all threads that do
not have a per-thread binding. Thus, the value of a Var is the value
of its per-thread binding, or, if it is not bound in the thread
requesting the value, the value of the root binding, if any."

Vars are created using the =def= special form: =(def name value)=
which also creates a metadata map including entries for =:file= and
=:line=.  Of interest to us is the fact that a function definition
=(defn name [params*] exprs*)= is equivalent to defining a var =name=
as =(def name (fn [params* ] exprs*))=.  We therefore have access to
the file and line in which a function is defined. This is the
information we wish to present to our users.  To provide an accessor
to this information we use the following macro:



#+latex: \begin{listing}[H]
#+latex: \caption{caption} \label{label}
#+srcname: label
#+begin_src clojure :tangle yes :exports code
  (defmacro loc [sym] `(format "%s:%s"
                               (:file (meta (var ~sym)))
                               (:line (meta (var ~sym)))))
#+end_src
#+latex: \end{listing}

As before, the backquoted form is inserted verbatim, except that
\tilde escaped forms are evaluated before insertion.  The =var=
special form returns the Var object (not the value) that =sym= refers
to, and =meta= in turn accesses the metadata of the Var object.  We
are forced to use a macro rather than function call here because =var=
requires a symbol which refers to a Var whilst a function argument is
a symbol whose value will refer to a Var object.  



TODO - This is in the wrong place!

#+latex: \begin{listing}[H]
#+latex: \caption{caption} \label{label}
#+srcname: label
#+begin_src clojure :tangle yes :exports code
    (defmacro m [f] `(:file (meta (var ~f))))
    (defn loc [name] (format "%s:%s"
                             (:file (meta (var name)))
                             (:line (meta (var name)))))
    
  
  (defmacro defcontract-x [fn-name a c post body]
    (let [wrapped-arg {a `(wrap ~c ~a "p" "n")} ] 
      `(defn ~fn-name [~a]
         (wrap ~post 
               ~(clojure.walk/postwalk-replace wrapped-arg body)
               "Post condition p" "Post Condition n"))))
  
  
  
  
  (defcontract-x ff-save-x f 
    (make-contract gt0? gt0?)
    lenient
    (dosync (ref-set ff-saved f)))
  
  (defcontract-x ff-use-x n
    gt0?
    lenient
    (ff-saved n))
  
  
  
  (deftest ff-example-x ;\ref{line:test}
     (ff-save-x (fn [not-used] 50))
     (is (= 50 (ff-use-2 42)))
     (is (thrown? java.lang.Exception (ff-use-x -1)))
     (ff-save-x (fn [not-used] -1))
     (is (thrown? java.lang.Exception (ff-use-x 42))))
  
#+end_src
#+latex: \end{listing}


In the event of a failed contract, we wish to be able to report the
sequence of events which lead up to the failure.  This is typically
achieved through a stack trace: a description of the function call
stack. The JVM used by Clojure allows us to access the function call
stack as shown in Listing \ref{stacktrace}


TODO: below is not yet a code block: fails to compile.

#+latex: \begin{listing}[H]
#+latex: \caption{Stack trace} \label{stacktrace}
#+srcname: label


(defn ignored? [classname]
  (let [ignored #{"callers" "dbg" "clojure.lang" "swank" "eval"}]
    (some #(s/substring? % classname) ignored)))

(defn callers []
  (let [fns (map #(str (.getClassName %))
		 (-> (Throwable.) .fillInStackTrace .getStackTrace))]
    (vec (doall fns))))


#+latex: \end{listing}

Unfortunately here we face a potential performance impact.  The stack
trace can only be generated at run time.  Because of the delayed
contract checking of high order functions, we don't know at the time
we apply a contract whether or not that contract will be fulfilled and
hence whether or not the stack trace will be needed.  Accordingly we
must generate a stack trace for every contract application: a
potentially expensive process.  An approach to mitigating the impact
of this is described in 


** Meta Framework

So far we have made a number of assumptions about how the framework
will be used.  Some of these, such as our contract violation reporting
mechanism =contract-error=, will be inappropriate for many users.
Taking inspiration from the CLOS Meta Object Protocol \cite{kiczales},
we look for points of variation and introduce the ability to adapt our
framework to a user's needs.


*** Variation points

The first and most obvious variation point is the action to
undertake in the event of a contract violation.  Appropriate behaviour
depends on the application, state of development (developer build or
customer release) and the error philosophy of the development team.
More interestingly, different parts of the program may require
different error handling.  McConnell \cite{codecomplete} takes the
example of a spreadsheet program where failures in the screen refresh
code should be handled differently to failures in the underlying
calculation engine.

Clojure's dynamic variables provide the ability to rebind a variable.
This is distinct from simply shadowing the original; shadowing will
mask a variable within the lexical scope of the shadow whilst
rebinding provides the dynamic scope which we need to allow us to pass
closures around as fast class objects.  When a contract was applied to
a parameter, a harsh contract failure penalty may have been in place,
but when we come to use the parameter it may be that the penalty for
failure has been relaxed in which case a closure over a lexically
declared error behaviour would give unwanted behaviour. This is
similar to the common library problem \cite{8ways} where the application
developer does not wish to be constrained by the error reporting
mechanism of the library developer.


TODO Example


#+latex: \begin{listing}
#+begin_src clojure :tangle yes :exports code
  (defn simple-contract-error [position]
    (throw (Exception. (str "Contract failed: " position))))
  
  (def ^{:doc "Function to call on failure of a contract"}
    *contract-failure-function* #'simple-contract-error)
  
  (defn contract-error [position]
    (*contract-failure-function* position))
  
  
#+end_src
#+latex: \end{listing}
TODO work a citation to Toth in here. More subtly, there is a body of
work on the way that




| Variation point        | Options                  |
|------------------------+--------------------------|
| Behaviour on violation | termination, log, ignore |
| Diagnostic behaviour   | stack trace, debug break |
|                        |                          |

- what about exceptions etc?
  


** Lazy evaluation

As pointed out in \cite{imprecise-exceptions}, the addition of
exception handling to a lazy language can cause  increased strictness
by testing a function argument for errors when it's passed rather than
when it is used.  It is important that our wrap mechanism should not
cause unwarranted evaluation of lazy sequences. 

\bibliographystyle{alpha}
\bibliography{dbc}

* Notes :noexport:


make-contract is actually making a HIGH ORDER contract.  First order
contracts are flat assertions.

what do we do about functions that take more than one parameter?
Need to work out some use of =partial= to give us what we need.
Current post condition check is an ugly special case.

Same problem applies to function args that are fns of more than one
arg.  This must be symmetric surely.





** Existing work

There's a contracts library at http://www.fogus.me/fun/trammel/docs.html

**  Runtime vs Compile time contract assignment


Is there any benefit in using hooks to give the ability to set contracts at run time?







